/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jdbc.BookConnection;
import object.Book;

/**
 *
 * @author user
 */
public class BookManeMenu extends javax.swing.JFrame {

    /**
     * Creates new form BookManaMenu
     */
    public BookManeMenu() {

        initComponents();
        // すべてのデータを直接表示する
        showBook();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        showBookData = new javax.swing.JTable();
        titleInput = new javax.swing.JTextField();
        authorInput = new javax.swing.JTextField();
        isbnInput = new javax.swing.JTextField();
        priceInput = new javax.swing.JTextField();
        bookId = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        author = new javax.swing.JLabel();
        isbn = new javax.swing.JLabel();
        price = new javax.swing.JLabel();
        updata = new javax.swing.JButton();
        bookDataSearchInput = new javax.swing.JTextField();
        bookDataSearch = new javax.swing.JButton();
        showAllBookData = new javax.swing.JButton();
        addData = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        showMessage = new javax.swing.JLabel();
        showBookId = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showBookData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BookId", "タイトル", "著者名", "ISBNコード", "価格"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        showBookData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showBookDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(showBookData);

        titleInput.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        titleInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleInputActionPerformed(evt);
            }
        });

        authorInput.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        authorInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorInputActionPerformed(evt);
            }
        });

        isbnInput.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        isbnInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isbnInputActionPerformed(evt);
            }
        });

        priceInput.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        priceInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceInputActionPerformed(evt);
            }
        });
        priceInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceInputKeyTyped(evt);
            }
        });

        bookId.setText("BookId");

        title.setText("タイトル");

        author.setText("著者名");

        isbn.setText("ＩＳＢＮコード");

        price.setText("価格");

        updata.setText("更新");
        updata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updataActionPerformed(evt);
            }
        });

        bookDataSearchInput.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        bookDataSearchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookDataSearchInputActionPerformed(evt);
            }
        });

        bookDataSearch.setText("検索");
        bookDataSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookDataSearchActionPerformed(evt);
            }
        });

        showAllBookData.setText("一覧");
        showAllBookData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllBookDataActionPerformed(evt);
            }
        });

        addData.setText("登録");
        addData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataActionPerformed(evt);
            }
        });

        delete.setText("削除");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        showMessage.setForeground(new java.awt.Color(255, 0, 0));

        showBookId.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bookDataSearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bookDataSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showAllBookData, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bookId, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(isbn)
                                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(titleInput, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                    .addComponent(authorInput, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                    .addComponent(isbnInput, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                    .addComponent(priceInput, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                    .addComponent(showBookId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(addData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addComponent(updata)
                                .addGap(27, 27, 27)
                                .addComponent(delete))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(showMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bookId, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(showBookId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleInput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(authorInput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(isbnInput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(isbn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updata, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addData, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addComponent(showMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bookDataSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(showAllBookData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookDataSearchInput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void titleInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleInputActionPerformed

    private void authorInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorInputActionPerformed

    private void isbnInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isbnInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isbnInputActionPerformed

    private void priceInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceInputActionPerformed
    /**
     * priceの欄にdoubleのみに設定する
     *
     * @param evt
     */
    private void priceInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceInputKeyTyped
        char ch = evt.getKeyChar();
        if ((Character.isLetter(ch) && !evt.isAltDown())) {
            evt.consume();
        }
    }//GEN-LAST:event_priceInputKeyTyped
    /**
     * データベースを更新する
     *
     * @param evt
     */
    private void updataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updataActionPerformed
        if (showBookData.getSelectedRowCount() == 1) {
            //空白の欄がないかを判断する
            if (!titleInput.getText().equals("") && !authorInput.getText().equals("") && !isbnInput.getText().equals("") && !priceInput.getText().equals("")) {
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss ");
                String dateString = simpleDateFormat.format(new Date());
                // 更新するsql
                String query = "update bookData set title ='" + titleInput.getText() + "',author = '" + authorInput.getText() + "',isbn = '" + isbnInput.getText() + "',price = '" + priceInput.getText() + "',updataTime ='" + dateString + "'where bookId ='" + showBookId.getText() + "';";
                //　変更したデータを更新する
                BookConnection bc = new BookConnection();
                bc.excuteSQLQuery(query);
                showMessage("更新");
                showBook();
            } else {
                //空欄の場合の提示
                if (titleInput.getText().equals("")) {
                    showMessage.setText("タイトルを入力してください");
                } else if (authorInput.getText().equals("")) {
                    showMessage.setText("著者名を入力してください");
                } else if (isbnInput.getText().equals("")) {
                    showMessage.setText("ISBNコードを入力してください");
                } else if (priceInput.getText().equals("")) {
                    showMessage.setText("価格を入力してください");
                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "更新するデータを一行で選択してください");
        }
    }//GEN-LAST:event_updataActionPerformed

    private void bookDataSearchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookDataSearchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookDataSearchInputActionPerformed

    private void bookDataSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookDataSearchActionPerformed
        //　検索するキーワードを変数keyにする
        String key = bookDataSearchInput.getText().trim();
        DefaultTableModel model = (DefaultTableModel) showBookData.getModel();
        //　何も入力してない場合
        if (key.isEmpty()) {
            JOptionPane.showMessageDialog(this, "検索するキーワードを入力してください");
            // 改めてデータを表示する
            model.setRowCount(0);
            showBook();
        } else {
            //　すべてのデータをテーブルにクリアする
            model.setRowCount(0);
            // 検索するsqlqueryを設定する
            String query = "select * from bookData  WHERE title LIKE '%" + key + "%' or author like '%" + key + "%';";
            ArrayList<Book> bookList = new ArrayList<>();
            showDataToModel(bookList, query);
            showMessage.setText(key + " を検索した結果です");

        }

    }//GEN-LAST:event_bookDataSearchActionPerformed

    private void showAllBookDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllBookDataActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) showBookData.getModel();
        // 改めてデータを表示する
        model.setRowCount(0);
        showBook();
        // 提示
        showMessage.setText("一覧表示しました");
        // 入力できるところをすべてクリアする
        clearInput();

    }//GEN-LAST:event_showAllBookDataActionPerformed
    /**
     * 本のデータをデータベースに追加する
     *
     * @param evt
     */
    private void addDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataActionPerformed
        //空白の欄がないかを判断する
        if (!titleInput.getText().equals("") && !authorInput.getText().equals("") && !isbnInput.getText().equals("") && !priceInput.getText().equals("")) {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss ");
            String dateString = simpleDateFormat.format(new Date());
            // データを追加するSQL
            String query = "insert into bookData(bookId,title,author,isbn,price,crreteTime)values(nextval('bookData_bookId_seq'),'" + titleInput.getText() + "','" + authorInput.getText() + "','" + isbnInput.getText() + "','" + priceInput.getText() + "','" + dateString
                    + "');";
            BookConnection bc = new BookConnection();
            // データを追加する
            bc.excuteSQLQuery(query);
            showMessage("追加");

            showBook();
        } else {
            //空欄の場合の提示
            if (titleInput.getText().equals("")) {
                showMessage.setText("タイトルを入力してください");
            } else if (authorInput.getText().equals("")) {
                showMessage.setText("著者名を入力してください");
            } else if (isbnInput.getText().equals("")) {
                showMessage.setText("ISBNコードを入力してください");
            } else if (priceInput.getText().equals("")) {
                showMessage.setText("価格を入力してください");
            }

        }
    }//GEN-LAST:event_addDataActionPerformed
    /**
     * 本を削除する
     *
     * @param evt
     */
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        DefaultTableModel model = (DefaultTableModel) showBookData.getModel();
        if (showBookData.getSelectedRowCount() == 1) {
            // 削除するsql
            String query = "delete from bookData where bookId = '" + showBookId.getText() + "';";
            BookConnection bc = new BookConnection();
            bc.excuteSQLQuery(query);
            showMessage("削除");
            //すべてリフレッシュ
            showBook();
            clearInput();
        } else {
            JOptionPane.showMessageDialog(this, "削除するデータを一行で選択してください");
        }
    }//GEN-LAST:event_deleteActionPerformed
    /**
     * テーブルの行を選択する時に入力欄に該当するデータを表示
     *
     * @param evt
     */
    private void showBookDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showBookDataMouseClicked
        // 選択された行をiに表示する
        int i = showBookData.getSelectedRow();
        TableModel model = showBookData.getModel();
        //　該当する欄に表示する
        showBookId.setText(model.getValueAt(i, 0).toString());
        titleInput.setText(model.getValueAt(i, 1).toString());
        authorInput.setText(model.getValueAt(i, 2).toString());
        isbnInput.setText(model.getValueAt(i, 3).toString());
        priceInput.setText(model.getValueAt(i, 4).toString());
    }//GEN-LAST:event_showBookDataMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookManeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookManeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookManeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookManeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookManeMenu().setVisible(true);
            }
        });
    }

    /**
     * 本のデータをテーブルに写す
     */
    public void showBook() {
        DefaultTableModel model = (DefaultTableModel) showBookData.getModel();
        model.setRowCount(0);
        // listでデータを取得する
        BookConnection bc = new BookConnection();
        String query = "select * from bookData;";
        ArrayList<Book> list = bc.getBookList(query);
        if (!list.isEmpty()) {
            showDataToModel(list, query);
        } else {

        }
    }

    public void showMessage(String message) {
        showMessage.setText(titleInput.getText() + "の" + message + "が成功しました");
    }

    public void showDataToModel(ArrayList<Book> book, String query) {
        BookConnection bc = new BookConnection();
        book = bc.getBookList(query);
        if (!book.isEmpty()) {
            DefaultTableModel model = (DefaultTableModel) showBookData.getModel();
            Object[] row = new Object[5];
            Book b = new Book();
            //数列でデータをテーブルに入れる
            for (int i = 0; i < book.size(); i++) {
                row[0] = book.get(i).getBookId();
                row[1] = book.get(i).getTitle();
                row[2] = book.get(i).getAuthor();
                row[3] = book.get(i).getIsbn();
                row[4] = book.get(i).getPrice();
                // 数列でテーブルに入れる
                model.addRow(row);
            }
        } else {
            showMessage.setText("該当するデータはありません");
            JOptionPane.showMessageDialog(this, "データはありません");
        }
    }

    public void clearInput() {
        bookDataSearchInput.setText(null);
        showBookId.setText(null);
        titleInput.setText(null);
        authorInput.setText(null);
        isbnInput.setText(null);
        priceInput.setText(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addData;
    private javax.swing.JLabel author;
    private javax.swing.JTextField authorInput;
    private javax.swing.JButton bookDataSearch;
    private javax.swing.JTextField bookDataSearchInput;
    private javax.swing.JLabel bookId;
    private javax.swing.JButton delete;
    private javax.swing.JLabel isbn;
    private javax.swing.JTextField isbnInput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel price;
    private javax.swing.JTextField priceInput;
    private javax.swing.JButton showAllBookData;
    private javax.swing.JTable showBookData;
    private javax.swing.JLabel showBookId;
    private javax.swing.JLabel showMessage;
    private javax.swing.JLabel title;
    private javax.swing.JTextField titleInput;
    private javax.swing.JButton updata;
    // End of variables declaration//GEN-END:variables
}
